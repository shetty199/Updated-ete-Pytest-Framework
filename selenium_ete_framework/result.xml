<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="18.797" timestamp="2024-09-22T22:11:00.351635" hostname="klblrlp1443"><testcase classname="tests.test_ete.Testone" name="test_ete[getdata0]" time="18.409"><failure message="selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable&#10;  (Session info: chrome=128.0.6613.120)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00A48EC3+26947]&#10;&#09;(No symbol) [0x009DB9C4]&#10;&#09;(No symbol) [0x008D2B3D]&#10;&#09;(No symbol) [0x00918D64]&#10;&#09;(No symbol) [0x0090E25F]&#10;&#09;(No symbol) [0x0093B54C]&#10;&#09;(No symbol) [0x0090DCF5]&#10;&#09;(No symbol) [0x0093B7E4]&#10;&#09;(No symbol) [0x00954EB0]&#10;&#09;(No symbol) [0x0093B2E6]&#10;&#09;(No symbol) [0x0090C789]&#10;&#09;(No symbol) [0x0090D17D]&#10;&#09;GetHandleVerifier [0x00D14693+2957587]&#10;&#09;GetHandleVerifier [0x00D69779+3305977]&#10;&#09;GetHandleVerifier [0x00AD9A6F+619759]&#10;&#09;GetHandleVerifier [0x00AE109C+650012]&#10;&#09;(No symbol) [0x009E44FD]&#10;&#09;(No symbol) [0x009E14B8]&#10;&#09;(No symbol) [0x009E1655]&#10;&#09;(No symbol) [0x009D39A6]&#10;&#09;BaseThreadInitThunk [0x753DFCC9+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770080CE+286]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x7700809E+238]">self = &lt;tests.test_ete.Testone object at 0x0000024BE4E00BE0&gt;
getdata = {'Password': 'Admin@123', 'User_name': 'master_user'}

    def test_ete(self,getdata):
        log=self.getLogger()
        time.sleep(4)
        # Login
        login=LoginPage(self.driver)
        log.info("entering the user name")
        login.username().send_keys(getdata["User_name"])
        # self.driver.find_element(By.XPATH, "//*[@id='loginUserID']").send_keys('master_user')
    
        login.password1().send_keys(getdata["Password"])
        # self.driver.find_element(By.XPATH, "//*[@id='loginPassword']").send_keys('Admin@123')
    
        login.log_click().click()
        # self.driver.find_element(By.XPATH, "//*[@id='login_in_to_portal']").click()
        time.sleep(5)
    
        # self.hover(RulePage.hover_on_rules)
        # Hover over element
        # self.driver.hover.hover_on_rules()
        #hover.hover_on_rules(self.driver)
        # element_to_hover = self.driver.find_element(By.XPATH,"//*[@id='print__screen']/kl-pages/kl-left-side-bar/div/ul/div[2]/li[10]/div/div[1]/img")
        # actions = ActionChains(self.driver)
        # actions.move_to_element(element_to_hover).perform()
    
        # Click on the hidden option
        hidden_option = self.driver.find_element(By.XPATH, "//*[@id='sub-menu-data9']/li[10]")
&gt;       hidden_option.click()

tests\test_ete.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webelement.py:88: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webelement.py:396: in _execute
    return self._parent.execute(command, params)
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:428: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024BE4E028C0&gt;
response = {'status': 400, 'value': '{"value":{"error":"element not interactable","message":"element not interactable\\n  (Sessio...\n\\tRtlGetAppContainerNamedObjectPath [0x770080CE+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x7700809E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get('methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "{}.{}".format(frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: chrome=128.0.6613.120)
E       Stacktrace:
E       	GetHandleVerifier [0x00A48EC3+26947]
E       	(No symbol) [0x009DB9C4]
E       	(No symbol) [0x008D2B3D]
E       	(No symbol) [0x00918D64]
E       	(No symbol) [0x0090E25F]
E       	(No symbol) [0x0093B54C]
E       	(No symbol) [0x0090DCF5]
E       	(No symbol) [0x0093B7E4]
E       	(No symbol) [0x00954EB0]
E       	(No symbol) [0x0093B2E6]
E       	(No symbol) [0x0090C789]
E       	(No symbol) [0x0090D17D]
E       	GetHandleVerifier [0x00D14693+2957587]
E       	GetHandleVerifier [0x00D69779+3305977]
E       	GetHandleVerifier [0x00AD9A6F+619759]
E       	GetHandleVerifier [0x00AE109C+650012]
E       	(No symbol) [0x009E44FD]
E       	(No symbol) [0x009E14B8]
E       	(No symbol) [0x009E1655]
E       	(No symbol) [0x009D39A6]
E       	BaseThreadInitThunk [0x753DFCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x770080CE+286]
E       	RtlGetAppContainerNamedObjectPath [0x7700809E+238]

..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\errorhandler.py:243: ElementNotInteractableException</failure></testcase></testsuite></testsuites>